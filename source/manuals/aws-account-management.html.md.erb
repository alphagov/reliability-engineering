---
title: How to manage Amazon Web Services (AWS) cross account access
---

# <%= current_page.data.title %>

If you're setting up a new AWS account and your team want to use cross-account access use the `gds-users` account as your base account.

Use multiple AWS accounts to:

* enforce administrative isolation between workloads
* minimize the impact of security breaches
* isolate audit data in separate accounts

By having separate AWS accounts for production and test workloads teams can restrict the security impact of a compromised AWS credential.

To avoid managing several sets of AWS credentials for multiple accounts teams should use roles and cross-account access. AWS describe this approach as [multiple account security strategy][].

Reliability Engineering has more information about how to [access AWS][].

## AWS cross account access

AWS cross account access allows user accounts held in the `gds-users` base account to access resources in target AWS account's created by your team.

Access to resources within a target AWS account is controlled using [AWS Identity and Access Management (IAM)][] roles managed within that AWS account.

IAM roles establish trust relationships between the target's (*trusting*) AWS account and the GDS base (*trusted*) AWS account.

## How to manage access to resources

Users exist in the GDS base account and have permission to assume a role into a target account. The target account defines the roles users in the base account can assume, such as a Data Analyst:

![Assume Role Diagram](../images/aws/assume-role.svg)

### Trust Relationship (Assume Role Policy)

The trust relationship describes what entities can assume the role (*principles*) and imposes *conditions* on how and when those entities can assume the role. An [AWS principle][] can be a user account, an AWS account or a role, principle entities are expressed as an [Amazon Resource Name (ARN)][].

Use conditions to enforce the presence of Multifactor authentication (MFA), for example restricting access to particular IP addresses or particular times of the day.

It's **strongly** recommended not to trust an AWS base account. Trusting an AWS base account allows all of the entities within that base account to assume that particular role.

Example Trust Relationship policy:

    {
      "Version": "2012-10-17",
      "Statement": {
        "Effect": "Allow",
        "Principal": { "AWS": "arn:aws:iam::123456789012:user/example.user@digital.cabinet-office.gov.uk" },
        "Action": "sts:AssumeRole",
        "Condition": { "Bool": { "aws:MultiFactorAuthPresent": "true" } }
      }
    }

### Resource Permissions (Policies)

Access to resources are managed through [IAM Policies][] which can be custom built or defined by Amazon. Design your roles around the permissions people need to complete a task.

Amazon provides some [examples of AWS policies][] related to IAM permissions.

[multiple account security strategy]: https://aws.amazon.com/answers/account-management/aws-multi-account-security-strategy/
[access AWS]: access-aws.html
[AWS Identity and Access Management (IAM)]: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html
[AWS principle]: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html
[IAM Policies]: https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html
[examples of AWS policies]: https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_examples.html
[Amazon Resource Name (ARN)]: https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html
